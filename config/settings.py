"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
# Use of environs package to work with environment variables
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# When debug is set to False it is required to add a setting for ALLOWED_HOSTS, which controls the
# specific hosts or domains that can access the website.
DEBUG = env.bool("DJANGO_DEBUG")

ALLOWED_HOSTS = [".herokuapp.com", "localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Django's sites framework is a a powerful feature that allows one Django project to control multiple sites.
    "django.contrib.sites",
    # Third party
    "crispy_forms",
    "allauth",
    "allauth.account",
    # Local
    "accounts",  # app for custom users
    "pages",  # app for static pages
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

# noinspection PyInterpreter
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Updating the DIRS setting means that Django will also look in this new folder.
        # It will still look for any templates folders within an app.
        "DIRS": [str(BASE_DIR.joinpath("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # The environment variable DATABASE_URL will be created by Heroku when we deploy.
    "default": env.dj_db_url("DATABASE_URL", default="postgres://postgres@db/postgres")
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
# STATICFILES_DIRS defines the location of static files in local development.
STATICFILES_DIRS = (str(BASE_DIR.joinpath("static")),)
# STATIC_ROOT is the location of static files for production so it must be set to a different name, typically staticfiles.
# docker-compose exec web python manage.py collectstatic
STATIC_ROOT = str(BASE_DIR.joinpath("staticfiles"))
# STATICFILES_FINDERS tell Django how to look for static file directories.
# The FileSystemFinders looks within the STATICFILES_DIRS setting, which we set to static, for any static files.
# The AppDirectoriesFinder looks for any directories named static located within an app, as opposed to located
# at a project-level static directory. This setting is read top-to-bottom.
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]


# For using the CustomUser model
AUTH_USER_MODEL = "accounts.CustomUser"


# django-crispy-forms
CRISPY_TEMPLATE_PACK = "bootstrap4"

# django-allauth config
# To what page will the user be redirected after logging in.
LOGIN_REDIRECT_URL = "home"
# To what page will the user be redirected after logging out.
# django-allauth's ACCOUNT_LOGOUT_REDIRECT overrides the built-in LOGOUT_REDIRECT_URL.
ACCOUNT_LOGOUT_REDIRECT = "home"
# We only have one site to our project | django.contrib.sites at the installed apps
SITE_ID = 1
# Specific authentication options for django-allauth
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend", "allauth.account.auth_backends.AuthenticationBackend",)
# To remove the Remember Me box option when the user Logs In.
ACCOUNT_SESSION_REMEMBER = True
# So the user doesn't have to type the password twice when signing up.
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
# Switching over to using just email for login, not username
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

# Email Settings
DEFAULT_FROM_EMAIL = "admin@djangobookstore.com"

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# EMAIL_HOST = env("DJANGO_EMAIL_HOST")
# EMAIL_PORT = env("DJANGO_EMAIL_PORT")
# EMAIL_HOST_USER = env("DJANGO_EMAIL_HOST_USER")
# EMAIL_HOST_PASSWORD = env("DJANGO_EMAIL_HOST_PASSWORD")




